---
import Layout from '../../layouts/Layout.astro';
import '../../styles/globals.css';
import '../../styles/randomNumber.css';
import { z } from 'zod';
import { translate } from '../../utils/translations.ts';
let { lang } = Astro.params;
while (!lang || !translate.isValidLang(lang)) {
	lang = 'en';
}
const t = translate.useLang(lang);
const min = Astro.url.searchParams.get('min');
const max = Astro.url.searchParams.get('max');
if (!min || !max) {
	return Astro.redirect(`/${lang}/?error`);
}
const mode = Astro.url.searchParams.get('mode') || '10';
const frequency = Astro.url.searchParams.get('frequency') || 'repeat';
const numbers = Astro.url.searchParams.get('numbers') || '1';
const isMinValid = z
	.number()
	.min(Number.MIN_SAFE_INTEGER)
	.max(Number.MAX_SAFE_INTEGER)
	.safeParse(parseInt(min));
const isMaxValid = z
	.number()
	.min(Number.MIN_SAFE_INTEGER)
	.max(Number.MAX_SAFE_INTEGER)
	.safeParse(parseInt(max));
const isModeValid = z.enum(['10', '2', '8', '16']);
const isFrequencyValid = z.enum(['repeat', 'no-repeat']);
const isNumbersValid = z.number().min(1).max(5).safeParse(parseInt(numbers));
const hex = mode == isModeValid.Values[16] ? '0x' : '';
const randomNumber: string[] = [];
if (
	!isMinValid.success ||
	!isMaxValid.success ||
	isMinValid.data > isMaxValid.data ||
	!isNumbersValid.success ||
	!isModeValid.safeParse(mode).success ||
	!isFrequencyValid.safeParse(frequency).success
) {
	return Astro.redirect(`/${lang}?error`);
}
for (let i = 0; i < isNumbersValid.data; i++) {
	const number = Math.floor(
		Math.random() * (isMaxValid.data - isMinValid.data + 1) +
			isMinValid.data,
	)
		.toString(parseInt(mode))
		.toUpperCase();
	if (
		(frequency == isFrequencyValid.Values['no-repeat'] &&
			!randomNumber.includes(number)) ||
		frequency == isFrequencyValid.Values['repeat']
	) {
		randomNumber.push(number);
	}
}
const label = randomNumber.length > 1 ? 'multiple' : 'single';
---

<Layout>
	<h1>
		{
			t(
				`generate.label.${label}`,
				label == 'multiple' ? numbers : null,
				mode,
				hex,
				isMinValid.data.toString(parseInt(mode)),
				hex,
				isMaxValid.data.toString(parseInt(mode)),
			)
		}
	</h1>
	<h1>
		{hex}<h1 id="number">{randomNumber.join(' | ')}</h1>
	</h1>
	{
		randomNumber.length < parseInt(numbers) && (
			<h1 id="duplicate">{t('generate.label.duplicate')}</h1>
		)
	}
	<div id="buttons">
		<noscript>
			<a
				href=`/${lang}/generate?numbers=${numbers}&mode=${mode}&frequency=${frequency}&min=${min}&max=${max}`
				><button>{t('generate.buttons.another')}</button></a
			>
			<style>
				#another {
					display: none;
				}
			</style>
		</noscript>
		<button id="another">{t('generate.buttons.another')}</button>
		<a
			href=`/${lang}/?numbers=${numbers}&mode=${mode}&frequency=${frequency}`
			><button>{t('generate.buttons.intervals')}</button></a
		>
	</div>
	<h1 id="previousLabel">{t('generate.label.previous')}</h1>
	<h1 id="previous"></h1>
	<script src="../../scripts/numbers.ts"></script>
</Layout>
