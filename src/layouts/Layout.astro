---
import { t, isValidLang } from '../utils/translations.ts';
let { lang } = Astro.params;
if (!lang || !isValidLang(lang)) {
	lang = 'en';
}
---

<!doctype html>
<html lang={lang} data-theme="light">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="description" content={t(lang, 'document.meta.description')} />
		<meta name="og:title" content={t(lang, 'document.meta.og.title')} />
		<meta
			name="og:description"
			content={t(lang, 'document.meta.og.description')}
		/>
		<link
			rel="stylesheet"
			href="https://fonts.googleapis.com/css2?family=Martian+Mono:wght@600&display=swap"
		/>
		<link rel="favicon" href="./favicon.ico" />
		<title>{t(lang, 'document.title')}</title>
	</head>
	<body>
		<noscript>
			<style>
				#fallback, #theme, #lang {
					display: none;
				}
			</style>
		</noscript>
		{
			lang != Astro.params.lang && (
				<h1 id="fallback">
					Fallback to English because no language with that name was found
				</h1>
			)
		}
		<button id="theme">{t(lang, 'theme.change')}</button>
		<select id="lang">
			<option data-short="en" selected={lang == 'en'}>English</option>
			<option data-short="it" selected={lang == 'it'}>Italiano</option>
			<option data-short="pl" selected={lang == 'pl'}>Polski</option>
			<option data-short="mi" selected={lang == 'mi'}>MƒÅori</option>
		</select>
		<slot />
		<script>
			let theme = localStorage.getItem('theme');
			const html = document.getElementsByTagName('html')[0];
			if (theme != 'light' && theme != 'dark') {
				theme = 'light';
			}
			localStorage.setItem('theme', theme);
			html.setAttribute('data-theme', theme);
			const themeElement = document.getElementById('theme');
			if (themeElement) {
				themeElement.addEventListener('click', () => {
					let theme = localStorage.getItem('theme');
					if (theme != 'light' && theme != 'dark') {
						theme = 'light';
					}
					switch (theme) {
						case 'light': {
							localStorage.setItem('theme', 'dark');
							html.setAttribute('data-theme', 'dark');
							break;
						}
						case 'dark': {
							localStorage.setItem('theme', 'light');
							html.setAttribute('data-theme', 'light');
							break;
						}
					}
				});
			}
			const langElement = document.getElementById('lang');
			if (langElement) {
				langElement.addEventListener('change', () => {
					for (let i = 0; i < langElement.children.length; i++) {
						if (i == (langElement as HTMLSelectElement).selectedIndex) {
							const lang = langElement.children[i].getAttribute('data-short');
							if (lang) {
								const path = window.location.pathname.split('/')[2];
								const params = window.location.search;
								window.location.replace(`/${lang}${path ?  '/' + path : ''}${params}`);
								localStorage.setItem('lang', lang);
							}
						}
					}
				});
			}
		</script>
	</body>
</html>
