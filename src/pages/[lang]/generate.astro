---
import Layout from '../../layouts/Layout.astro';
import '../../styles/globals.css';
import '../../styles/randomNumber.css';
import { z } from 'zod';
import isValidLang from '../../utils/isValidLang.ts';
import t from '../../utils/t.ts';
let { lang } = Astro.params;
if (!lang || !isValidLang(lang)) {
	return Astro.redirect('/');
}
const min = Astro.url.searchParams.get('min');
const max = Astro.url.searchParams.get('max');
if (!min || !max) {
	return Astro.redirect('/?error');
}
const mode = Astro.url.searchParams.get('mode') || '10';
const frequency = Astro.url.searchParams.get('frequency') || 'repeat';
const numbers = Astro.url.searchParams.get('numbers') || '1';
const isMinValid = z
	.number()
	.min(Number.MIN_SAFE_INTEGER)
	.max(Number.MAX_SAFE_INTEGER)
	.safeParse(parseInt(min));
const isMaxValid = z
	.number()
	.min(Number.MIN_SAFE_INTEGER)
	.max(Number.MAX_SAFE_INTEGER)
	.safeParse(parseInt(max));
const isModeValid = z.enum(['10', '2', '8', '16']);
const isFrequencyValid = z.enum(['repeat', 'no-repeat']);
const isNumbersValid = z.number().min(1).max(5).safeParse(parseInt(numbers));
const hex = mode == isModeValid.Values[16] ? '0x' : '';
const randomNumber: string[] = [];
if (
	!isMinValid.success ||
	!isMaxValid.success ||
	isMinValid.data > isMaxValid.data ||
	!isNumbersValid.success ||
	!isModeValid.safeParse(mode).success ||
	!isFrequencyValid.safeParse(frequency).success
) {
	return Astro.redirect('/?error');
}
for (let i = 0; i < isNumbersValid.data; i++) {
	const number = Math.floor(
		Math.random() * (isMaxValid.data - isMinValid.data + 1) + isMinValid.data,
	)
		.toString(parseInt(mode))
		.toUpperCase();
	if (
		frequency == isFrequencyValid.Values['no-repeat'] &&
		!randomNumber.includes(number)
	) {
		randomNumber.push(number);
	} else if (frequency == isFrequencyValid.Values['repeat']) {
		randomNumber.push(number);
	}
}
---

<Layout>
	{
		randomNumber.length > 1 ? (
			<h1>{t(lang, 'generate.label.multiple', numbers, mode, hex, min, hex, max)}</h1>
		) : (
			<h1>{t(lang, 'generate.label.single', mode, hex, min, hex, max)}</h1>
		)
	}
	<h1>
		{hex}<span id="number">{randomNumber.join(' | ')}</span>
	</h1>
	{
		randomNumber.length < parseInt(numbers) ? (
			<h1 id="duplicate">{t(lang, 'generate.label.duplicate')}</h1>
		) : (
			<h1 id="duplicate" />
		)
	}
	<div id="buttons">
		<noscript>
			<a
				href=`${lang}/generate?numbers=${numbers}&mode=${mode}&frequency=${frequency}&min=${min}&max=${max}`
				><button>{t(lang, 'generate.buttons.another')}</button></a
			>
			<style>
				#another {
					display: none;
				}
			</style>
		</noscript>
		<button id="another">{t(lang, 'generate.buttons.another')}</button>
		<a href=`/${lang}/?numbers=${numbers}&mode=${mode}&frequency=${frequency}`
			><button>{t(lang, 'generate.buttons.intervals')}</button></a
		>
	</div>
	<h1 id="previousLabel">{t(lang, 'generate.label.previous')}</h1>
	<h1 id="previous"></h1>
	<script>
		const anotherElement = document.getElementById('another');
		const previousElement = document.getElementById('previous');
		let oldNumbers: string[] = [];
		if (anotherElement) {
			anotherElement.addEventListener('click', () => {
				const number = document.getElementById('number');
				const randomNumber: string[] = [];
				if (number) {
					const nums = number.innerHTML.split(' | ');
					for (let i = 0; i < nums.length; i++) {
						if (!oldNumbers.includes(nums[i])) {
							oldNumbers.push(nums[i]);
						}
					}
					const url = new URLSearchParams(window.location.search);
					const min = url.get('min');
					const max = url.get('max');
					const mode = url.get('mode') || '10';
					const frequency = url.get('frequency') || 'repeat';
					const numbers = url.get('numbers') || '1';
					if (min && max && mode && numbers) {
						for (let i = 0; i < parseInt(numbers); i++) {
							const number = Math.floor(
								Math.random() * (parseInt(max) - parseInt(min) + 1) +
									parseInt(min),
							)
								.toString(parseInt(mode))
								.toUpperCase();
							if (frequency == 'no-repeat' && !randomNumber.includes(number)) {
								randomNumber.push(number);
							} else if (frequency == 'repeat') {
								randomNumber.push(number);
							}
						}
					}
					number.innerHTML = randomNumber.join(' | ');
					const duplicate = document.getElementById('duplicate');
					if (duplicate) {
						duplicate.innerHTML =
							randomNumber.length < parseInt(numbers)
								? "Some numbers weren't generated because they were a duplicate"
								: '';
					}
					if (previousElement) {
						const previousLabel = document.getElementById('previousLabel');
						if (previousLabel) {
							previousLabel.style.display = 'block';
						}
						previousElement.innerHTML = oldNumbers.join(', ');
					}
				}
			});
		}
	</script>
</Layout>
